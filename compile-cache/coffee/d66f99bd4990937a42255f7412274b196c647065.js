(function() {
  var DB, OpenRecent;

  DB = function(key) {
    this.key = key;
    return this;
  };

  DB.prototype.getData = function() {
    var data;
    data = localStorage[this.key];
    data = data != null ? JSON.parse(data) : {};
    return data;
  };

  DB.prototype.setData = function(data) {
    return localStorage[this.key] = JSON.stringify(data);
  };

  DB.prototype.get = function(name) {
    var data;
    data = this.getData();
    return data[name];
  };

  DB.prototype.set = function(name, value) {
    var data;
    data = this.getData();
    data[name] = value;
    return this.setData(data);
  };

  OpenRecent = function() {
    this.db = new DB('openRecent');
    return this;
  };

  OpenRecent.prototype.onLocalStorageEvent = function(e) {
    if (e.key === this.db.key) {
      return this.update();
    }
  };

  OpenRecent.prototype.onUriOpened = function() {
    var editor, filePath, _ref, _ref1;
    editor = atom.workspace.getActiveEditor();
    filePath = editor != null ? (_ref = editor.buffer) != null ? (_ref1 = _ref.file) != null ? _ref1.path : void 0 : void 0 : void 0;
    if (!filePath) {
      return;
    }
    if (!filePath.indexOf('://' === -1)) {
      return;
    }
    if (filePath) {
      return this.insertFilePath(filePath);
    }
  };

  OpenRecent.prototype.addCommandListeners = function() {
    var index, path, _fn, _fn1, _ref, _ref1;
    _ref = this.db.get('files');
    _fn = (function(_this) {
      return function(path) {
        return atom.workspaceView.on("open-recent:open-recent-file-" + index, function() {
          return _this.openFile(path);
        });
      };
    })(this);
    for (index in _ref) {
      path = _ref[index];
      _fn(path);
    }
    _ref1 = this.db.get('paths');
    _fn1 = (function(_this) {
      return function(path) {
        return atom.workspaceView.on("open-recent:open-recent-path-" + index, function() {
          return _this.openPath(path);
        });
      };
    })(this);
    for (index in _ref1) {
      path = _ref1[index];
      _fn1(path);
    }
    return atom.workspaceView.on("open-recent:clear", (function(_this) {
      return function() {
        _this.db.set('files', []);
        _this.db.set('paths', []);
        return _this.update();
      };
    })(this));
  };

  OpenRecent.prototype.openFile = function(path) {
    return atom.workspace.open(path);
  };

  OpenRecent.prototype.openPath = function(path) {
    var replaceCurrentProject;
    replaceCurrentProject = false;
    if (!atom.project.path && atom.config.get('open-recent.replaceNewWindowOnOpenDirectory')) {
      replaceCurrentProject = true;
    } else if (atom.project.path && atom.config.get('open-recent.replaceProjectOnOpenDirectory')) {
      replaceCurrentProject = true;
    }
    if (replaceCurrentProject) {
      atom.project.setPath(path);
      return atom.workspaceView.trigger('tree-view:toggle-focus');
    } else {
      return atom.open({
        pathsToOpen: [path]
      });
    }
  };

  OpenRecent.prototype.addListeners = function() {
    this.addCommandListeners();
    atom.workspace.on('uri-opened', this.onUriOpened.bind(this));
    return window.addEventListener("storage", this.onLocalStorageEvent.bind(this));
  };

  OpenRecent.prototype.removeCommandListeners = function() {
    var index, path, _ref, _ref1;
    _ref = this.db.get('files');
    for (index in _ref) {
      path = _ref[index];
      atom.workspaceView.off("open-recent:open-recent-file-" + index);
    }
    _ref1 = this.db.get('paths');
    for (index in _ref1) {
      path = _ref1[index];
      atom.workspaceView.off("open-recent:open-recent-path-" + index);
    }
    return atom.workspaceView.off("open-recent:clear");
  };

  OpenRecent.prototype.removeListeners = function() {
    this.removeCommandListeners();
    atom.workspaceView.off('editor:attached');
    return window.removeEventListener('storage', this.onLocalStorageEvent.bind(this));
  };

  OpenRecent.prototype.init = function() {
    this.addListeners();
    if (!this.db.get('paths')) {
      this.db.set('paths', []);
    }
    if (!this.db.get('files')) {
      this.db.set('files', []);
    }
    this.insertCurrentPath();
    return this.update();
  };

  OpenRecent.prototype.insertCurrentPath = function() {
    var index, maxRecentDirectories, path, recentPaths;
    if (!atom.project.getRootDirectory()) {
      return;
    }
    path = atom.project.getRootDirectory().path;
    recentPaths = this.db.get('paths');
    index = recentPaths.indexOf(path);
    if (index !== -1) {
      recentPaths.splice(index, 1);
    }
    recentPaths.splice(0, 0, path);
    maxRecentDirectories = atom.config.get('open-recent.maxRecentDirectories');
    if (recentPaths.length > maxRecentDirectories) {
      recentPaths.splice(maxRecentDirectories, recentPaths.length - maxRecentDirectories);
    }
    this.db.set('paths', recentPaths);
    return this.update();
  };

  OpenRecent.prototype.insertFilePath = function(path) {
    var index, maxRecentFiles, recentFiles;
    recentFiles = this.db.get('files');
    index = recentFiles.indexOf(path);
    if (index !== -1) {
      recentFiles.splice(index, 1);
    }
    recentFiles.splice(0, 0, path);
    maxRecentFiles = atom.config.get('open-recent.maxRecentFiles');
    if (recentFiles.length > maxRecentFiles) {
      recentFiles.splice(maxRecentFiles, recentFiles.length - maxRecentFiles);
    }
    this.db.set('files', recentFiles);
    return this.update();
  };

  OpenRecent.prototype.createSubmenu = function() {
    var index, path, recentFiles, recentPaths, submenu;
    submenu = [];
    submenu.push({
      command: "pane:reopen-closed-item",
      label: "Reopen Closed File"
    });
    submenu.push({
      type: "separator"
    });
    recentFiles = this.db.get('files');
    if (recentFiles.length) {
      for (index in recentFiles) {
        path = recentFiles[index];
        submenu.push({
          label: path,
          command: "open-recent:open-recent-file-" + index
        });
      }
      submenu.push({
        type: "separator"
      });
    }
    recentPaths = this.db.get('paths');
    if (recentPaths.length) {
      for (index in recentPaths) {
        path = recentPaths[index];
        submenu.push({
          label: path,
          command: "open-recent:open-recent-path-" + index
        });
      }
      submenu.push({
        type: "separator"
      });
    }
    submenu.push({
      command: "open-recent:clear",
      label: "Clear List"
    });
    return submenu;
  };

  OpenRecent.prototype.updateMenu = function() {
    var dropdown, item, _i, _j, _len, _len1, _ref, _ref1, _results;
    _ref = atom.menu.template;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      dropdown = _ref[_i];
      if (dropdown.label === "File" || dropdown.label === "&File") {
        _ref1 = dropdown.submenu;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          item = _ref1[_j];
          if (item.command === "pane:reopen-closed-item" || item.label === "Open Recent") {
            delete item.command;
            item.label = "Open Recent";
            item.submenu = this.createSubmenu();
            atom.menu.update();
            break;
          }
        }
        break;
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  OpenRecent.prototype.update = function() {
    this.removeCommandListeners();
    this.updateMenu();
    return this.addCommandListeners();
  };

  OpenRecent.prototype.destroy = function() {
    return this.removeListeners();
  };

  module.exports = {
    configDefaults: {
      maxRecentFiles: 8,
      maxRecentDirectories: 8,
      replaceNewWindowOnOpenDirectory: true,
      replaceProjectOnOpenDirectory: false
    },
    model: null,
    activate: function() {
      atom.config.setDefaults('open-recent', this.configDefaults);
      this.model = new OpenRecent();
      return this.model.init();
    },
    deactivate: function() {
      this.model.destroy();
      return this.model = null;
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/c:/Users/LesanceDtAY/.atom/packages/open-recent/lib/main.coffee